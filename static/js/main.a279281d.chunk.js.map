{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","serviceWorker","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a279281d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt= 'robots' src= {`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\n    const CardList = ({ robots }) => {\r\n    return (\r\n        <div>    \r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            } \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n      <div className='pa2'>\r\n        <input \r\n            className= 'pa3 ba b--blue bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots...'\r\n            onChange={searchChange}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\n    \r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: '750px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n   \r\n    componentDidMount() {\r\n       this.props.onRequestRobots(); \r\n    }\r\n\r\n\r\n    render () {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n            return isPending ? \r\n                 <h1>Loading</h1> :\r\n               (\r\n                <div className='tc'>\r\n                <h1 className='f1'>RoboFerret</h1>\r\n                <SearchBox searchChange ={onSearchChange}/>\r\n                    <Scroll>\r\n                     <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n\r\n } from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: 'CHANGE_SEARCHFIELD',\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(`https://jsonplaceholder.typicode.com/users`)\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch ({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\nimport serviceWorker from \"./index\";\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n\r\nexport default serviceWorker;","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n } from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch , action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n             return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots:action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error:action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\r\nconst store = \r\n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}> \r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\nexport default serviceWorker;\r\n\r\n\r\n\r\n"],"sourceRoot":""}